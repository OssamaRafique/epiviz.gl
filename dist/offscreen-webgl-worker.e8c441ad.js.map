{"mappings":"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","sources":["src/epiviz.gl/specification-processor.js","src/epiviz.gl/utilities.js","src/epiviz.gl/genome-sizes.js","src/epiviz.gl/vertex-calculator.js"],"sourcesContent":["import {\n  rgbStringToHex,\n  scale,\n  colorSpecifierToHex,\n  getScaleForSpecification,\n} from \"./utilities\";\nimport { SIZE_UNITS } from \"./vertex-calculator\";\n\nimport * as d3 from \"d3-scale-chromatic\";\n\n// Default channel values of specification which is passed to webgl drawer\nconst DEFAULT_CHANNELS = Object.freeze({\n  size: {\n    value: 1,\n    numComponents: 1,\n    type: \"float\",\n  },\n  color: {\n    value: 255 ** 3,\n    numComponents: 1,\n    type: \"float\",\n  },\n  x: {\n    value: 0,\n    numComponents: null, // x and y are placed in an attribute vector in the shader that is already handled\n    type: null, // i.e. calls to numComponents or type should not happen as it would break the shader\n  },\n  y: {\n    value: 0,\n    numComponents: null,\n    type: null,\n  },\n  opacity: {\n    value: 1,\n    numComponents: 1,\n    type: \"float\",\n  },\n  shape: {\n    value: \"dot\",\n    numComponents: null,\n    type: null, // Will not interact with shader code\n  },\n  width: {\n    // Default values for width and height add complications\n    // to mapping geometry and creating tick vertices\n    value: undefined,\n    numComponents: 1,\n    type: \"float\",\n  },\n\n  height: {\n    value: undefined,\n    numComponents: 1,\n    type: \"float\",\n  },\n});\n\nconst DEFAULT_MAX_SIZE = 100;\nconst DEFAULT_MIN_SIZE = 0;\nconst DEFAULT_MIN_OPACITY = 0;\n\nconst DEFAULT_MIN_WIDTH = 0;\nconst DEFAULT_MIN_HEIGHT = 0;\nconst DEFAULT_MAX_WIDTH = 1 / SIZE_UNITS;\nconst DEFAULT_MAX_HEIGHT = 1 / SIZE_UNITS;\n\nconst DEFAULT_COLOR_SCHEME = \"interpolateBrBG\";\n\n// first value is undefined as categories are 1-indexed\nconst SHAPES = [undefined, \"dot\", \"triangle\", \"circle\", \"diamond\"];\n\n/**\n * Given a track, determine the WebGL draw mode for it\n *\n * @param {Object} track from specification\n * @returns WebGLDrawMode as a string\n */\nconst getDrawModeForTrack = (track) => {\n  switch (track.mark) {\n    case \"line\":\n      return \"LINE_STRIP\";\n    case \"tick\":\n    case \"arc\":\n      return \"LINES\";\n    case \"point\":\n      if (track.shape && track.shape.value !== \"dot\") {\n        return \"TRIANGLES\";\n      } else {\n        return \"POINTS\";\n      }\n    case \"rect\":\n    case \"area\":\n      return \"TRIANGLES\";\n  }\n};\n\nclass SpecificationProcessor {\n  /**\n   * Process a specification by reading in the data, the channel information, and producing an\n   * iterator like interface with getNextTrack to feed to a drawer.\n   *\n   * @param {Object} specification user defined specification\n   * @param {Function} callback function to call after all the data has been loaded\n   */\n  constructor(specification, callback) {\n    this.index = 0;\n    this.specification = specification;\n    if (typeof specification.defaultData === \"string\") {\n      // data is a url to get\n      this.dataPromise = fetch(specification.defaultData)\n        .then((response) => response.text())\n        .then((text) => (this.data = text.split(\"\\n\")));\n    } else if (specification.defaultData) {\n      // default data is defined, assumed to be an object\n      this.data = specification.defaultData;\n      this.isInlineData = true;\n    }\n    this.tracks = specification.tracks.map((track) => new Track(this, track));\n\n    const allPromises = this.tracks\n      .map((track) => track.dataPromise)\n      .filter((p) => p); // Removes undefined\n    if (this.dataPromise) {\n      allPromises.push(this.dataPromise);\n    }\n\n    this.xScale = getScaleForSpecification(\"x\", specification);\n    this.yScale = getScaleForSpecification(\"y\", specification);\n\n    // When all tracks have acquired their data, call the callback\n    // TODO: Allow tracks to be processed while waiting for others, need to keep in mind order\n    Promise.all(allPromises).then(() => callback(this));\n  }\n\n  /**\n   * Get the next track to process\n   * @returns {@link Track}\n   */\n  getNextTrack() {\n    if (this.index >= this.tracks.length) {\n      return null;\n    }\n    return this.tracks[this.index++];\n  }\n}\n\nclass Track {\n  /**\n   * Process a track from a specification by loading data and producing an iterator\n   * like interface with getNextDataPoint or getNextMark.\n   *\n   * @param {Object} specification user defined visualization\n   * @param {Object} track user defined track\n   */\n  constructor(specification, track) {\n    this.track = track;\n\n    if (typeof track.data === \"string\") {\n      // Track has its own data to GET\n      this.dataPromise = fetch(track.data)\n        .then((response) => response.text())\n        .then((text) => {\n          this.data = text.split(/[\\n\\r]+/);\n          this.processHeadersAndMappers();\n          this.hasOwnData = true;\n        });\n    } else if (track.data) {\n      // Track has its own inline data\n      this.data = track.data;\n      this.isInlineData = true;\n      this.processHeadersAndMappers();\n      this.hasOwnData = true;\n    } else if (specification.data) {\n      // Track does not have its own data, but the specification has default data\n      this.data = specification.data;\n      this.isInlineData = specification.isInlineData;\n      this.processHeadersAndMappers();\n    } else if (specification.dataPromise) {\n      // Track does not have its own data, but the specification is GETting default data\n      specification.dataPromise.then(() => {\n        this.data = specification.data;\n        this.processHeadersAndMappers();\n      });\n    } else {\n      console.error(\n        `Could not find data (no defaultData in specification and no data specified for this track) for track ${track}.`\n      );\n    }\n  }\n\n  /**\n   * Read the headers from the first row of data and then build functions to map a data row\n   * to a channel value for drawing. Ultimately a method due to clunky constructor.\n   */\n  processHeadersAndMappers() {\n    // Processing headers\n    if (this.isInlineData) {\n      this.headers = Object.keys(this.data);\n      this.data.length = this.data[this.headers[0]].length; // assign length to data object for iteration\n      this.index = 0;\n    } else {\n      this.headers = this.data[0].split(\",\");\n      this.index = 1; // 1 to skip header\n    }\n\n    // Creating channel mappers\n    this.channelMaps = new Map();\n    Object.keys(DEFAULT_CHANNELS).forEach((channel) => {\n      this.channelMaps.set(channel, this.buildMapperForChannel(channel));\n    });\n  }\n\n  /**\n   * Get the next data point from the track. Returns null when all points have been returned.\n   * @returns A data point with the x and y coordinates and other attributes from the header\n   */\n  getNextDataPoint() {\n    if (this.index >= this.data.length) {\n      return null;\n    }\n\n    const toReturn = { geometry: { coordinates: [], dimensions: [] } };\n    let splitted;\n    if (this.isInlineData) {\n      splitted = this.headers.map((header) => this.data[header][this.index]);\n    } else {\n      const currRow = this.data[this.index];\n      splitted = currRow.split(\",\");\n    }\n\n    this.index++;\n\n    this.headers.forEach((header, index) => {\n      toReturn[header] = splitted[index];\n    });\n\n    const rawHeight = this.channelMaps.get(\"height\")(splitted);\n    const rawWidth = this.channelMaps.get(\"width\")(splitted);\n    const x = this.channelMaps.get(\"x\")(splitted);\n    const y = this.channelMaps.get(\"y\")(splitted);\n    toReturn.geometry.coordinates.push(x, y);\n    toReturn.geometry.dimensions.push(rawWidth, rawHeight);\n    return toReturn;\n  }\n\n  /**\n   * Get the next mark from the track for the drawer to process. Returns null when all\n   * marks have been returned.\n   * @returns An object containing information used to draw a mark for a row of data.\n   */\n  getNextMark() {\n    // Getting the next mark cannot modify the data objects as other tracks may refer to\n    // the same data\n    if (this.index >= this.data.length) {\n      return null;\n    }\n\n    const toReturn = {};\n    let splitted;\n    if (this.isInlineData) {\n      splitted = this.headers.map((header) => this.data[header][this.index]);\n    } else {\n      const currRow = this.data[this.index];\n      splitted = currRow.split(\",\");\n    }\n\n    this.index++;\n\n    this.channelMaps.forEach((mapper, channel) => {\n      toReturn[channel] = mapper(splitted);\n    });\n\n    return toReturn;\n  }\n\n  /**\n   * Builds a function which maps an attribute value to a channel value for use by the drawer.\n   * The function will return a default if not present in the track, or a constant if\n   * value is defined.\n   *\n   * @param {String} channel one of the channels listed in default channels\n   * @returns the function\n   */\n  buildMapperForChannel = (channel) => {\n    if (channel in this.track) {\n      const channelInfo = this.track[channel];\n      if (\"value\" in channelInfo) {\n        if (channel === \"color\") {\n          channelInfo.value = colorSpecifierToHex(channelInfo.value);\n        }\n        return () => channelInfo.value;\n      } else {\n        const attributeIndex = this.headers.indexOf(channelInfo.attribute);\n        let attrMapper;\n\n        switch (channelInfo.type) {\n          case \"inline\":\n            attrMapper = buildMapperForInlineChannel(channel, channelInfo);\n            break;\n          case \"quantitative\":\n            attrMapper = buildMapperForQuantitiveChannel(channel, channelInfo);\n            break;\n          case \"categorical\":\n            attrMapper = buildMapperForCategoricalChannel(channel, channelInfo);\n            break;\n          case \"genomic\":\n            const chrAttributeIndex = this.headers.indexOf(\n              channelInfo.chrAttribute\n            );\n            const geneAttributeIndex = this.headers.indexOf(\n              channelInfo.geneAttribute\n            );\n            attrMapper = buildMapperForGenomicChannel(channel, channelInfo);\n            return (row) =>\n              attrMapper(row[chrAttributeIndex], row[geneAttributeIndex]);\n          case \"genomicRange\":\n            const genomicAttributeIndices = [\n              this.headers.indexOf(channelInfo.chrAttribute),\n              this.headers.indexOf(channelInfo.startAttribute),\n              this.headers.indexOf(channelInfo.endAttribute),\n            ];\n            attrMapper = buildMapperForGenomicRangeChannel(\n              channel,\n              channelInfo\n            );\n            return (\n              row // Pass in values for the genomic attributes to mapper\n            ) =>\n              attrMapper(...genomicAttributeIndices.map((index) => row[index]));\n        }\n        return (row) => attrMapper(row[attributeIndex]);\n      }\n    } else {\n      return () => DEFAULT_CHANNELS[channel].value;\n    }\n  };\n}\n\n/**\n * Build a function which maps an attribute that is a channel value to a compatible value.\n *\n * @param {String} channel the name of the channel to build an inline mapper for\n * @param {Object} channelInfo the info of the channel from a track\n * @returns a function that maps attribute values to appropriate channel values.\n */\nconst buildMapperForInlineChannel = (channel, channelInfo) => {\n  switch (channel) {\n    case \"width\":\n    case \"height\":\n    case \"size\":\n      return (dimension) => parseFloat(dimension);\n    case \"color\":\n      return (color) => colorSpecifierToHex(color);\n    default:\n      console.info(\n        `No special behavior for ${channel} as an inline attribute.`\n      );\n      return (inlineValue) => inlineValue;\n  }\n};\n\n/**\n * Build a function which maps a numerical value for an attribute to a property of a mark\n * @param {*} channel the name of the quantitative channel to map\n * @param {*} channelInfo the object containing info for this channel from the specification\n * @returns a function that maps a data attribute value to a channel value\n */\nconst buildMapperForQuantitiveChannel = (channel, channelInfo) => {\n  switch (channel) {\n    case \"x\":\n    case \"y\":\n      // Map x and y to itself, but we need a function to do it\n      return (coord) => parseFloat(coord);\n    case \"opacity\":\n      return scale(channelInfo.domain, [\n        channelInfo.minOpacity || DEFAULT_MIN_OPACITY,\n        1,\n      ]);\n    case \"size\":\n      return scale(channelInfo.domain, [\n        channelInfo.minSize || DEFAULT_MIN_SIZE,\n        channelInfo.maxSize || DEFAULT_MAX_SIZE,\n      ]);\n    case \"color\":\n      const d3colorScale =\n        !channelInfo.colorScheme || !(channelInfo.colorScheme in d3)\n          ? d3[DEFAULT_COLOR_SCHEME]\n          : d3[channelInfo.colorScheme];\n      const zeroToOneScale = scale(channelInfo.domain, [0, 1]);\n      return (attrValue) =>\n        rgbStringToHex(d3colorScale(zeroToOneScale(attrValue)));\n    case \"width\":\n      return scale(channelInfo.domain, [\n        channelInfo.minWidth || DEFAULT_MIN_WIDTH,\n        channelInfo.maxWidth || DEFAULT_MAX_WIDTH,\n      ]);\n    case \"height\":\n      return scale(channelInfo.domain, [\n        channelInfo.minHeight || DEFAULT_MIN_HEIGHT,\n        channelInfo.maxHeight || DEFAULT_MAX_WIDTH,\n      ]);\n    default:\n      console.error(\n        `${channel} is not a supported channel for quantitative attributes!`\n      );\n  }\n};\n\n/**\n * Build a function which maps a discrete (integers are possible) value for an attribute\n * to a property of a mark\n * @param {*} channel the name of the categorical channel to map\n * @param {*} channelInfo the object containing info for this channel from the specification\n * @returns a function that maps a data attribute value to a channel value\n */\nconst buildMapperForCategoricalChannel = (channel, channelInfo) => {\n  const categoryTracker = new Map();\n  let channelScale;\n  switch (channel) {\n    case \"x\":\n    case \"y\":\n      // +1 here to avoid setting x or y at a boundary that makes it not visible\n      channelScale = scale([1, channelInfo.cardinality + 1], [-1, 1]);\n      break;\n    case \"opacity\":\n      channelScale = scale(\n        [1, channelInfo.cardinality],\n        [channelInfo.minOpacity || DEFAULT_MIN_OPACITY, 1]\n      );\n      break;\n    case \"size\":\n      channelScale = scale(\n        [1, channelInfo.cardinality],\n        [\n          channelInfo.minSize || DEFAULT_MIN_SIZE,\n          channelInfo.maxSize || DEFAULT_MAX_SIZE,\n        ]\n      );\n      break;\n    case \"shape\":\n      channelScale = (categoryId) => SHAPES[categoryId % SHAPES.length];\n      break;\n    case \"color\":\n      let d3colorScale =\n        !channelInfo.colorScheme || !(channelInfo.colorScheme in d3)\n          ? d3[DEFAULT_COLOR_SCHEME]\n          : d3[channelInfo.colorScheme];\n      if (Array.isArray(d3colorScale)) {\n        console.error(\n          \"Currenty only interpolating color schemes are supported, using default\"\n        );\n        d3colorScale = d3[DEFAULT_COLOR_SCHEME];\n      }\n      const zeroToOneScale = scale([1, channelInfo.cardinality], [0, 1]);\n      channelScale = (categoryId) =>\n        rgbStringToHex(d3colorScale(zeroToOneScale(categoryId)));\n      break;\n    case \"width\":\n      channelScale = scale(\n        [1, channelInfo.cardinality],\n        [\n          channelInfo.minWidth || DEFAULT_MIN_WIDTH,\n          channelInfo.maxWidth || DEFAULT_MAX_WIDTH,\n        ]\n      );\n      break;\n    case \"height\":\n      channelScale = scale(\n        [1, channelInfo.cardinality],\n        [\n          channelInfo.minHeight || DEFAULT_MIN_HEIGHT,\n          channelInfo.maxHeight || DEFAULT_MAX_HEIGHT,\n        ]\n      );\n      break;\n    default:\n      console.error(\n        `${channel} is not a supported channel for categorical attributes!`\n      );\n  }\n\n  return (attrValue) => {\n    if (!categoryTracker.has(attrValue)) {\n      categoryTracker.set(attrValue, categoryTracker.size + 1);\n    }\n    return channelScale(categoryTracker.get(attrValue));\n  };\n};\n\n/**\n * Build a function which maps a genome chr, gene, to an object consumable by a GenomeScale\n * @param {*} channel either x or y\n * @param {*} channelInfo the object containing info for this channel from the specification\n * @returns a function that maps (genomeChr, geneLoc) -> [chrId, geneLocation]\n *  ex: [\"X\", 200]\n */\nconst buildMapperForGenomicChannel = (channel, channelInfo) => {\n  switch (channel) {\n    case \"x\":\n    case \"y\":\n      return (chr, gene) => {\n        let chrId = chr.startsWith(\"chr\") ? chr.substring(3) : chr.toString();\n        return [chrId, parseInt(gene)];\n      };\n\n    default:\n      console.error(\n        `${channel} is not a supported channel for genomic attributes!`\n      );\n  }\n};\n\n/**\n * Build a function which maps a genome chr, start, and end to an object consumable by a scale\n * @param {*} channel either x or y, width or height may be included if doing arc marks\n * @param {*} channelInfo the object containing info for this channel from the specification\n * @returns a function that maps (genomeChr, genomeStart, genomeEnd) -> an object containing mark metadata for position\n *  format: [chrId, geneLocation, chrId2, geneLocation2]\n *  ex: [\"1\", 1000, \"X\", 2000]\n */\nconst buildMapperForGenomicRangeChannel = (channel, channelInfo) => {\n  switch (channel) {\n    case \"width\":\n    case \"height\":\n    case \"x\":\n    case \"y\":\n      return (chr, genomeStart, genomeEnd) => {\n        let chrId = chr.startsWith(\"chr\") ? chr.substring(3) : chr.toString();\n        return [\n          [chrId, parseInt(genomeStart)],\n          [chrId, parseInt(genomeEnd)],\n        ];\n      };\n\n    default:\n      console.error(\n        `${channel} is not a supported channel for genomic attributes!`\n      );\n  }\n};\n\nexport default SpecificationProcessor;\n\nexport { DEFAULT_CHANNELS, getDrawModeForTrack };\n","import { GenomeScale } from \"./genome-sizes\";\nimport { color } from \"d3-color\";\n\n/**\n * Returns a linear scale to map elements in domain to elements in range.\n * @param {Array} domain array of length two containing minimum and maximum values\n * @param {Array} range array of length two containing minimum and maximum values\n * @returns linear scale mapping domain to range\n */\nfunction scale(domain, range) {\n  const domainLength = domain[1] - domain[0];\n  const rangeLength = range[1] - range[0];\n  const slope = rangeLength / domainLength;\n  const intercept = range[1] - slope * domain[1];\n  return (x) => slope * x + intercept;\n}\n\n/**\n * Maps RGB values to integer for webgl buffer.\n *\n * @param {Integer} red value from 0 to 255\n * @param {Integer} green value from 0 to 255\n * @param {Integer} blue value from 0 to 255\n * @returns RGB hex value as integer\n */\nfunction rgbToHex(red, green, blue) {\n  return (red << 16) | (green << 8) | (blue << 0);\n}\n\nfunction rgbStringToHex(rgb) {\n  const colorVals = rgb.substring(4, rgb.length - 1).split(\",\");\n  return rgbToHex(...colorVals.map((asStr) => parseInt(asStr)));\n}\n\nfunction colorSpecifierToHex(specifier) {\n  if (!isNaN(specifier)) {\n    // Specifier is already a hex value\n    return Math.floor(specifier);\n  }\n  const asColor = color(specifier);\n  return rgbToHex(asColor.r, asColor.g, asColor.b);\n}\n\n/**\n * Get the VIEWPORT of the specification to be used by the mouseReader.\n * If all types for a dimension across tracks are categorical or genomic,\n * will default to [-1, 1] for that dimension for the mouseReader. If X or Y\n * has a fixed value, it will consider the width or height channel domains.\n *\n * @param {Object} specification of visualization\n * @returns [smallestX, largestX, smallestY, largestY] of viewport\n */\nfunction getViewportForSpecification(specification) {\n  let smallestX = Number.POSITIVE_INFINITY;\n  let largestX = Number.NEGATIVE_INFINITY;\n  let smallestY = Number.POSITIVE_INFINITY;\n  let largestY = Number.NEGATIVE_INFINITY;\n\n  specification.tracks.forEach((track) => {\n    let xDomain = track.x.domain;\n    if (\n      !xDomain &&\n      track.x.value !== undefined &&\n      track.width.domain !== undefined\n    ) {\n      xDomain = track.width.domain;\n    }\n    let yDomain = track.y.domain;\n    if (\n      !yDomain &&\n      track.y.value !== undefined &&\n      track.height &&\n      track.height.domain !== undefined\n    ) {\n      yDomain = track.height.domain;\n    }\n\n    if (xDomain) {\n      smallestX = xDomain[0] < smallestX ? xDomain[0] : smallestX;\n      largestX = xDomain[1] > largestX ? xDomain[1] : largestX;\n    }\n    if (yDomain) {\n      smallestY = yDomain[0] < smallestY ? yDomain[0] : smallestY;\n      largestY = yDomain[1] > largestY ? yDomain[1] : largestY;\n    }\n  });\n  smallestX = smallestX === Number.POSITIVE_INFINITY ? -1 : smallestX;\n  largestX = largestX === Number.NEGATIVE_INFINITY ? 1 : largestX;\n  smallestY = smallestY === Number.POSITIVE_INFINITY ? -1 : smallestY;\n  largestY = largestY === Number.NEGATIVE_INFINITY ? 1 : largestY;\n\n  return [smallestX, largestX, smallestY, largestY];\n}\n\n/**\n * Given a specification, return a SCALE to be used for mapping data points to clip space\n * for the drawer.\n *\n * @param {String} dimension either x or y\n * @param {Object} specification for the visualization\n * @returns function which can be used to map to an \"x\" or \"y\" value\n */\nconst getScaleForSpecification = (dimension, specification) => {\n  if (dimension !== \"x\" && dimension !== \"y\") {\n    console.error(`${dimension} is not x or y!`);\n  }\n  let genomic = false;\n  let genome;\n  for (const track of specification.tracks) {\n    if (track[dimension].type && track[dimension].type.includes(\"genomic\")) {\n      genome = track[dimension].genome;\n      genomic = true;\n      break;\n    }\n  }\n\n  if (!genomic) {\n    const viewport = getViewportForSpecification(specification);\n    if (dimension === \"x\") {\n      return scale([viewport[0], viewport[1]], [-1, 1]);\n    }\n    return scale([viewport[2], viewport[3]], [-1, 1]);\n  }\n\n  const geneScale = GenomeScale.completeScale(genome);\n\n  let smallestGene = undefined;\n  let smallestGeneValue = Number.POSITIVE_INFINITY;\n  let largestGene = undefined;\n  let largestGeneValue = Number.NEGATIVE_INFINITY;\n\n  for (const track of specification.tracks) {\n    let xDomain = track[dimension].domain;\n    if (xDomain) {\n      if (geneScale.toClipSpaceFromString(xDomain[0]) < smallestGeneValue) {\n        smallestGeneValue = geneScale.toClipSpaceFromString(xDomain[0]);\n        smallestGene = xDomain[0];\n      }\n\n      if (geneScale.toClipSpaceFromString(xDomain[1]) > largestGeneValue) {\n        largestGeneValue = geneScale.toClipSpaceFromString(xDomain[1]);\n        largestGene = xDomain[1];\n      }\n    }\n  }\n\n  const asScale = new GenomeScale(genome, [smallestGene, largestGene]);\n  return asScale.toCallable();\n};\n\nconst RELATIVE_LENGTH_UNITS = [\n  \"em\",\n  \"ex\",\n  \"ch\",\n  \"rem\",\n  \"lh\",\n  \"vw\",\n  \"vh\",\n  \"vmin\",\n  \"vmax\",\n  \"%\",\n];\nconst getPixelMeasurement = (cssMeasurement) => {\n  if (RELATIVE_LENGTH_UNITS.some((unit) => cssMeasurement.includes(unit))) {\n    return false;\n  }\n  const asFloat = parseFloat(cssMeasurement);\n  return isNaN(asFloat) ? false : asFloat;\n};\n\nconst DEFAULT_MARGIN = \"50px\";\nconst DEFAULT_WIDTH = \"100%\";\nconst DEFAULT_HEIGHT = DEFAULT_WIDTH;\nconst getDimAndMarginStyleForSpecification = (specification) => {\n  let toReturn = {};\n  const calculatedMargins = {};\n  if (specification.margins === undefined) {\n    toReturn.margin = DEFAULT_MARGIN;\n    calculatedMargins.top = DEFAULT_MARGIN;\n    calculatedMargins.right = DEFAULT_MARGIN;\n    calculatedMargins.bottom = DEFAULT_MARGIN;\n    calculatedMargins.left = DEFAULT_MARGIN;\n  } else {\n    calculatedMargins.top =\n      specification.margins.top === undefined\n        ? DEFAULT_MARGIN\n        : specification.margins.top;\n    calculatedMargins.right =\n      specification.margins.right === undefined\n        ? DEFAULT_MARGIN\n        : specification.margins.right;\n    calculatedMargins.bottom =\n      specification.margins.bottom === undefined\n        ? DEFAULT_MARGIN\n        : specification.margins.bottom;\n    calculatedMargins.left =\n      specification.margins.left === undefined\n        ? DEFAULT_MARGIN\n        : specification.margins.left;\n    // Shorthand for top right bottom left\n    toReturn.margin = `${calculatedMargins.top}\n                       ${calculatedMargins.right}\n                       ${calculatedMargins.bottom}\n                       ${calculatedMargins.left}`;\n  }\n\n  const calculatedWidth = specification.width || DEFAULT_WIDTH;\n  const calculatedHeight = specification.height || DEFAULT_HEIGHT;\n  const allMeasurements = [\n    calculatedMargins.top,\n    calculatedMargins.right,\n    calculatedMargins.bottom,\n    calculatedMargins.left,\n    calculatedWidth,\n    calculatedHeight,\n  ];\n\n  if (allMeasurements.every(getPixelMeasurement)) {\n    // Let's encode as a number to allow users using typescript or doing weird DOM things able to define\n    // the width and height explicitly\n    toReturn.width =\n      getPixelMeasurement(calculatedWidth) -\n      getPixelMeasurement(calculatedMargins.left) -\n      getPixelMeasurement(calculatedMargins.right);\n    toReturn.height =\n      getPixelMeasurement(calculatedHeight) -\n      getPixelMeasurement(calculatedMargins.bottom) -\n      getPixelMeasurement(calculatedMargins.top);\n  } else {\n    // If user is using css units in their margins and dimensions, then use css calc\n    toReturn.width = `calc(\n      ${calculatedWidth} - \n      ${calculatedMargins.left} - \n      ${calculatedMargins.right}\n    )`;\n\n    toReturn.height = `calc(\n      ${calculatedHeight} - \n      ${calculatedMargins.top} - \n      ${calculatedMargins.bottom}\n    )`;\n  }\n  return toReturn;\n};\n\n/**\n * We need to calculate points on the arc for that mark type, but it needs to be quick.\n * In addition, it shouldn't be a perfect circle, and also should look somewhat arc like.\n * This utility funciton returns function that takes a value between 0 and 1 where 0 maps\n * to the first control point, and 1 maps to the third control point.\n *\n * https://math.stackexchange.com/a/1361717\n *\n * @param {Array} P0 first control point\n * @param {Array} P1 second control point\n * @param {Array} P2 third control point\n * @returns a function [0, 1] -> point on curve\n */\nconst getQuadraticBezierCurveForPoints = (P0, P1, P2) => {\n  const x = (t) =>\n    (1 - t) ** 2 * P0[0] + 2 * t * (1 - t) * P1[0] + t ** 2 * P2[0];\n  const y = (t) =>\n    (1 - t) ** 2 * P0[1] + 2 * t * (1 - t) * P1[1] + t ** 2 * P2[1];\n  return (t) => [x(t), y(t)];\n};\n\nexport {\n  scale,\n  rgbToHex,\n  rgbStringToHex,\n  getViewportForSpecification,\n  colorSpecifierToHex,\n  getScaleForSpecification,\n  getDimAndMarginStyleForSpecification,\n  getQuadraticBezierCurveForPoints,\n  DEFAULT_WIDTH,\n  DEFAULT_HEIGHT,\n};\n","import { scale } from \"./utilities\";\nimport { format, precisionRound } from \"d3-format\";\n\n/**\n * Create a function which maps a genome pair to a location in the entire genome\n *\n * @param {String} genomeId key from genomeSizes object\n * @returns a function which maps a (chrId, pairNum) => to\n *  a number between 1 and total number of genes in the genome\n */\nconst createPairMapperToGenome = (genomeId) => {\n  let chrSizes = genomeSizes[genomeId];\n\n  let chrStarts = new Map();\n  let cumulativeTotal = 0;\n  chrSizes.forEach((value, key) => {\n    chrStarts.set(key, cumulativeTotal);\n    cumulativeTotal += value;\n  });\n\n  return (chr, pairNum) => {\n    return chrStarts.get(chr) + pairNum;\n  };\n};\n\nclass GenomeScale {\n  /**\n   * A scale used to map a genome pair to a location between -1 and 1 for data visualization.\n   * Also contains inverse and utility functions for getting labels for axis.\n   *\n   * @param {String} genomeId key from genomeSizes object\n   * @param {Array} domain array of length 2 containing the start and end of the genome\n   *   for the scale. ex: [\"chr2:1000\", \"chr3:2000\"]\n   */\n  constructor(genomeId, domain) {\n    if (genomeSizes[genomeId] === undefined) {\n      console.error(`${genomeId} is not a recognized genome!`);\n    }\n    this.genomeId = genomeId;\n    this.domain = domain;\n\n    let [startChr, startPair] = domain[0]\n      .substring(3) // Remove chr\n      .split(\":\"); // split chromesome and pair number\n    startPair = parseInt(startPair);\n\n    let [endChr, endPair] = domain[1].substring(3).split(\":\");\n    endPair = parseInt(endPair);\n\n    this.mapPairToGenomeIndex = createPairMapperToGenome(genomeId);\n    const firstPairInDomain = this.mapPairToGenomeIndex(startChr, startPair);\n    const lastPairInDomain = this.mapPairToGenomeIndex(endChr, endPair);\n    this.mapGenomeIndexToClipSpace = scale(\n      [firstPairInDomain, lastPairInDomain],\n      [-1, 1]\n    );\n    this.mapGenomeIndexToClipSpaceInverse = scale(\n      [-1, 1],\n      [firstPairInDomain, lastPairInDomain]\n    );\n  }\n\n  /**\n   * Map a genome pair to [-1, 1] with the parts.\n   *\n   * @param {String} chr id of chromosome in genome\n   * @param {Number} pair location in chromosome\n   * @returns value in [-1, 1] corresponding to genome range location\n   */\n  toClipSpaceFromParts(chr, pair) {\n    return this.mapGenomeIndexToClipSpace(this.mapPairToGenomeIndex(chr, pair));\n  }\n\n  /**\n   * Utility method for calling this.toClipSpaceFromParts.\n   *\n   * @param {String} pairStr in form \"chrID:geneNumber\" ex: \"chr1:1000\"\n   * @returns value in [-1, 1] corresponding to genome range location\n   */\n  toClipSpaceFromString(pairStr) {\n    let [chr, pair] = pairStr.substring(3).split(\":\");\n    pair = parseInt(pair);\n    return this.toClipSpaceFromParts(chr, pair);\n  }\n\n  /**\n   * Get the gene id from a value between [-1, 1]\n   *\n   * @param {Number} num number between [-1, 1]\n   * @param {String} formatting used for formatting gene number with d3-format\n   * @returns `chr${chrId}:${chrLoc}`\n   */\n  inverse(num, formatting = false) {\n    let genomeSpot = Math.floor(this.mapGenomeIndexToClipSpaceInverse(num));\n    let chrId;\n    let chrLoc;\n    let cumulativeTotal = 0;\n    for (const [chrKey, pairCount] of genomeSizes[this.genomeId].entries()) {\n      if (cumulativeTotal + pairCount >= genomeSpot) {\n        chrLoc = genomeSpot - cumulativeTotal;\n        chrId = chrKey;\n        break;\n      }\n      cumulativeTotal += pairCount;\n    }\n\n    return formatting\n      ? `chr${chrId}:${format(formatting)(chrLoc)}`\n      : `chr${chrId}:${chrLoc}`;\n  }\n\n  getMidpoint(chr1, gene1, chr2, gene2) {\n    const x1 = this.toClipSpaceFromParts(chr1, gene1);\n    const x2 = this.toClipSpaceFromParts(chr2, gene2);\n    const middleGene = this.inverse((x1 + x2) / 2);\n    const [chrId, gene] = middleGene.substring(3).split(\":\");\n    return [chrId, parseInt(gene)];\n  }\n\n  /**\n   * Get a sequence of ticks for a range in the genome.\n   *\n   * @param {Number} start number between [-1, 1]\n   * @param {Number} end number between [-1, 1] > start\n   * @returns object with tickCoords and corresponding tickLabels property\n   */\n  getTickCoordsAndLabels(start, end) {\n    let [startChr, startPair] = this.inverse(start).substring(3).split(\":\");\n    let [endChr, endPair] = this.inverse(end).substring(3).split(\":\");\n\n    const toReturn = [];\n    let suggestedFormat;\n    if (startChr === endChr) {\n      let difference = endPair - startPair;\n      let magnitude = Math.floor(Math.log10(difference));\n      let startingValue = startPair - (startPair % 10 ** magnitude);\n      suggestedFormat = precisionRound(10 ** magnitude, startingValue);\n\n      for (\n        let currValue = startingValue;\n        currValue < endPair;\n        currValue += 10 ** magnitude\n      ) {\n        toReturn.push(this.toClipSpaceFromParts(startChr, currValue));\n      }\n    } else {\n      suggestedFormat = \"1\";\n      for (const chrId of genomeSizes[this.genomeId].keys()) {\n        toReturn.push(this.toClipSpaceFromParts(chrId, 1));\n      }\n    }\n    return {\n      tickCoords: toReturn,\n      tickLabels: toReturn.map((coord) =>\n        this.inverse(coord, format(`.${suggestedFormat}s`))\n      ),\n    };\n  }\n\n  toCallable() {\n    // TODO investigate if using this method in the vertex calculator leads to slow downs\n    const func = (args) => {\n      return this.toClipSpaceFromParts(args[0], args[1]);\n    };\n    func.isGenomeScale = true;\n    func.mapGenomeIndexToClipSpaceInverse =\n      this.mapGenomeIndexToClipSpaceInverse.bind(this);\n    func.getMidpoint = this.getMidpoint.bind(this);\n    func.getTickCoordsAndLabels = this.getTickCoordsAndLabels.bind(this);\n    return func;\n  }\n\n  /**\n   * Utility method for getting a GenomeScale across an entire genome.\n   *\n   * @param {String} genomeId from genomeSizes\n   * @returns a GenomeScale across an entire genome\n   */\n  static completeScale(genomeId) {\n    const chrSizes = genomeSizes[genomeId];\n    const finalEntry = [...chrSizes.entries()][chrSizes.size - 1];\n\n    return new GenomeScale(genomeId, [\n      \"chr1:1\",\n      `chr${finalEntry[0]}:${finalEntry[1]}`,\n    ]);\n  }\n}\n\n/**\n * Available genomes to visualize. Each genome is a map from chromosome id to number of genes in chromosome.\n * Order matters as maps remember insertion order.\n */\nconst genomeSizes = {\n  hg38: new Map([\n    [\"1\", 248956422], // chr1\n    [\"2\", 242193529], // chr2\n    [\"3\", 198295559], // ...\n    [\"4\", 190214555],\n    [\"5\", 181538259],\n    [\"6\", 170805979],\n    [\"7\", 159345973],\n    [\"8\", 145138636],\n    [\"9\", 138394717],\n    [\"10\", 135086622],\n    [\"11\", 133797422],\n    [\"12\", 133275309],\n    [\"13\", 114364328],\n    [\"14\", 107043718],\n    [\"15\", 101991189],\n    [\"16\", 90338345],\n    [\"17\", 83257441],\n    [\"18\", 80373285],\n    [\"19\", 58617616],\n    [\"20\", 64444167], // ...\n    [\"21\", 46709983], // chr21\n    [\"22\", 50818468], // chr22\n    [\"X\", 156040895], // chrX\n    [\"Y\", 57227415], // chrY\n  ]),\n\n  hg19: new Map([\n    [\"1\", 249250621], // chr1\n    [\"2\", 243199373], // chr2\n    [\"3\", 198022430], // ...\n    [\"4\", 191154276],\n    [\"5\", 180915260],\n    [\"6\", 171115067],\n    [\"7\", 159138663],\n    [\"8\", 146364022],\n    [\"9\", 141213431],\n    [\"10\", 135534747],\n    [\"11\", 135006516],\n    [\"12\", 133851895],\n    [\"13\", 115169878],\n    [\"14\", 107349540],\n    [\"15\", 102531392],\n    [\"16\", 90354753],\n    [\"17\", 81195210],\n    [\"18\", 78077248],\n    [\"19\", 59128983],\n    [\"20\", 63025520], // ...\n    [\"21\", 48129895], // chr21\n    [\"22\", 51304566], // chr22\n    [\"X\", 155270560], // chrX\n    [\"Y\", 59373566], // chrY\n  ]),\n\n  mm9: new Map([\n    [\"1\", 197195432],\n    [\"2\", 181748087],\n    [\"3\", 159599783],\n    [\"4\", 155630120],\n    [\"5\", 152537259],\n    [\"6\", 149517037],\n    [\"7\", 152524553],\n    [\"8\", 131738871],\n    [\"9\", 124076172],\n    [\"10\", 129993255],\n    [\"11\", 121843856],\n    [\"12\", 121257530],\n    [\"13\", 120284312],\n    [\"14\", 125194864],\n    [\"15\", 103494974],\n    [\"16\", 98319150],\n    [\"17\", 95272651],\n    [\"18\", 90772031],\n    [\"19\", 61342430],\n    [\"X\", 166650296],\n    [\"Y\", 15902555],\n  ]),\n\n  mm10: new Map([\n    [\"1\", 195471971],\n    [\"2\", 182113224],\n    [\"3\", 160039680],\n    [\"4\", 156508116],\n    [\"5\", 151834684],\n    [\"6\", 149736546],\n    [\"7\", 145441459],\n    [\"8\", 129401213],\n    [\"9\", 124595110],\n    [\"10\", 130694993],\n    [\"11\", 122082543],\n    [\"12\", 120129022],\n    [\"13\", 120421639],\n    [\"14\", 124902244],\n    [\"15\", 104043685],\n    [\"16\", 98207768],\n    [\"17\", 94987271],\n    [\"18\", 90702639],\n    [\"19\", 61431566],\n    [\"X\", 171031299],\n    [\"Y\", 91744698],\n  ]),\n\n  mm39: new Map([\n    [\"1\", 195154279], // chr1\n    [\"2\", 181755017], // chr2\n    [\"3\", 159745316], // ...\n    [\"4\", 156860686],\n    [\"5\", 151758149],\n    [\"6\", 149588044],\n    [\"7\", 144995196],\n    [\"8\", 130127694],\n    [\"9\", 124359700],\n    [\"10\", 130530862],\n    [\"11\", 121973369],\n    [\"12\", 120092757],\n    [\"13\", 120883175],\n    [\"14\", 125139656],\n    [\"15\", 104073951],\n    [\"16\", 98008968],\n    [\"17\", 95294699], // ...\n    [\"18\", 90720763], // chr18\n    [\"19\", 61420004], // chr19\n    [\"X\", 169476592], // chrX\n    [\"Y\", 91455967], // chrY\n  ]),\n};\n\nexport { genomeSizes, GenomeScale };\n","import { getDrawModeForTrack } from \"./specification-processor\";\nimport { getQuadraticBezierCurveForPoints } from \"./utilities\";\n\n// Each size unit refers to 1/200 of the clip space\n// e.g. if the canvas is 1000x1000 pixels, and the size value for a mark\n// is 10, then that mark takes up 10/200 = 1/20 of the clip space which\n// is equal to 50 pixels\nconst SIZE_UNITS = 1 / 100;\n\nconst NUMBER_OF_VERTICES_PER_ARC = 20;\n\nconst ARC_HEIGHT_MODIFIER = 10;\n\n/**\n * Get a curve representing the arc with given start and end points\n *\n * https://math.stackexchange.com/a/1484684\n *\n * @param {Array} P0 start of arc\n * @param {Array} P2 end of arc\n * @returns function mapping 0 to beginning of arc, and 1 to end of arc\n */\nconst getCurveForArc = (P0, P2) => {\n  const midpoint = [P0[0] / 2 + P2[0] / 2, P0[1] / 2 + P2[1] / 2];\n  const slope = (P2[1] - P0[1]) / (P2[0] - P0[0]);\n  const distance = Math.sqrt((P2[1] - P0[1]) ** 2 + (P2[0] - P0[0]) ** 2);\n  if (!isFinite(slope)) {\n    // vertical slope\n    return getQuadraticBezierCurveForPoints(\n      P0,\n      [P0[0] - distance, midpoint[1]],\n      P2\n    );\n  }\n\n  const parameterized = (t) => [\n    midpoint[0] + (t / distance) * (P0[1] - P2[1]),\n    midpoint[1] + (t / distance) * (P2[0] - P0[0]),\n  ];\n\n  return getQuadraticBezierCurveForPoints(\n    P0,\n    parameterized(distance * ARC_HEIGHT_MODIFIER),\n    P2\n  );\n};\n\n/**\n * Transform a mark with a range for coordinates into a simpler mark to draw.\n *\n * @param {Object} mark that contains ranges for x or y\n * @returns mark with fixed x and y but with appropriate width and height for drawing\n */\nconst transformGenomicRangeToStandard = (mark, xScale, yScale) => {\n  let x, y, width, height;\n  if (Array.isArray(mark.x)) {\n    let x1 = xScale(mark.x[0]);\n    x = mark.x[0];\n    width = (xScale(mark.x[1]) - x1) / SIZE_UNITS;\n  } else {\n    x = mark.x;\n    width = mark.width;\n  }\n\n  if (Array.isArray(mark.y)) {\n    let y1 = yScale(mark.y[0]);\n    y = mark.y[0];\n    height = (yScale(mark.y[1]) - y1) / SIZE_UNITS;\n  } else {\n    y = mark.y;\n    height = mark.height;\n  }\n  return {\n    x,\n    y,\n    width,\n    height,\n  };\n};\n\n/**\n * Transform a mark with a range for coordinates and a range for width or height into a simpler mark to draw.\n *\n * @param {Object} mark that contains ranges for x and y, and potentially ranges for width and height\n * @returns mark with fixed x, y, width, and height for drawing\n */\nconst transformGenomicRangeArcToStandard = (mark, xScale, yScale) => {\n  let x, y, width, height;\n  if (Array.isArray(mark.x)) {\n    x = xScale.getMidpoint(\n      mark.x[0][0],\n      mark.x[0][1],\n      mark.x[1][0],\n      mark.x[1][1]\n    );\n    let x2 = xScale.getMidpoint(\n      mark.width[0][0],\n      mark.width[0][1],\n      mark.width[1][0],\n      mark.width[1][1]\n    );\n    let x1ClipSpace = xScale(x);\n    let x2ClipSpace = xScale(x2);\n\n    x = x1ClipSpace < x2ClipSpace ? x : x2;\n    width = Math.abs(xScale(x2) - x1ClipSpace) / SIZE_UNITS;\n  } else {\n    x = mark.x;\n    width = mark.width;\n  }\n\n  if (Array.isArray(mark.y)) {\n    y = yScale.getMidpoint(\n      mark.y[0][0],\n      mark.y[0][1],\n      mark.y[1][0],\n      mark.y[1][1]\n    );\n    let y2 = yScale.getMidpoint(\n      mark.height[0][0],\n      mark.height[0][1],\n      mark.height[1][0],\n      mark.height[1][1]\n    );\n\n    let y1ClipSpace = xScale(y);\n    let y2ClipSpace = xScale(y2);\n\n    y = y1ClipSpace < y2ClipSpace ? y : y2;\n    height = Math.abs(yScale(y2) - y1ClipSpace) / SIZE_UNITS;\n  } else {\n    y = mark.y;\n    height = mark.height;\n  }\n  return {\n    x,\n    y,\n    width,\n    height,\n  };\n};\n\nclass VertexCalculator {\n  /**\n   * A class used to construct the vertices of marks that are given to the drawer to draw.\n   *\n   * @param {Function or GenomeScale} xScale maps the x values of the data to clip space [-1, 1]\n   * @param {Function or GenomeScale} yScale maps the y values of the data to clip space [-1, 1]\n   * @param {Object} track from specification\n   */\n  constructor(xScale, yScale, track) {\n    this.xScale = xScale;\n    this.yScale = yScale;\n\n    this.track = track;\n    this.drawMode = getDrawModeForTrack(track);\n  }\n\n  /**\n   * Construct the vertices of a mark.\n   *\n   * @param {Object} mark to draw\n   * @returns vertices of mark\n   */\n  calculateForMark(mark) {\n    if (\n      this.track.x.type === \"genomicRange\" ||\n      this.track.y.type === \"genomicRange\"\n    ) {\n      if (this.track.mark === \"arc\") {\n        return this._calculateForMark(\n          transformGenomicRangeArcToStandard(mark, this.xScale, this.yScale)\n        );\n      }\n      return this._calculateForMark(\n        transformGenomicRangeToStandard(mark, this.xScale, this.yScale)\n      );\n    }\n    return this._calculateForMark(mark);\n  }\n\n  _calculateForMark(mark) {\n    if (this.track.mark === \"area\") {\n      const toReturn = this._getVerticesForAreaSection(mark);\n      this.lastMark = mark;\n      return toReturn;\n    }\n\n    if (this.track.mark === \"tick\") {\n      return this._getVerticesForTick(mark);\n    }\n\n    if (this.track.mark === \"line\") {\n      return this._getVertexForDot(mark);\n    }\n\n    if (this.track.mark === \"rect\") {\n      return this._getVerticesForRect(mark);\n    }\n\n    if (this.track.mark === \"arc\") {\n      return this._getVerticesForArc(mark);\n    }\n\n    switch (mark.shape) {\n      case \"dot\":\n        if (this.drawMode === \"POINTS\") {\n          return this._getVertexForDot(mark);\n        } else {\n          return this._getVerticesForSquare(mark);\n        }\n      case \"triangle\":\n        return this._getVerticesForTriangle(mark);\n      case \"diamond\":\n        return this._getVerticesForPolygon(mark, 4);\n      case \"pentagon\":\n        return this._getVerticesForPolygon(mark, 5);\n      case \"hexagon\":\n        return this._getVerticesForPolygon(mark, 6);\n      case \"circle\":\n        return this._getVerticesForPolygon(mark, 16);\n      case \"cross\":\n        return this._getVerticesForCross(mark);\n      default:\n        console.error(`${mark.shape} is not a valid shape!`);\n    }\n  }\n\n  _mapToGPUSpace(vertices) {\n    let isX = false;\n    return vertices.map((coord) => {\n      isX = !isX;\n      return isX ? this.xScale(coord) : this.yScale(coord);\n    });\n  }\n\n  _getVerticesForArc(mark) {\n    const startPoint = this._mapToGPUSpace([mark.x, mark.y]);\n    const quadraticCurve = getCurveForArc(startPoint, [\n      startPoint[0] + mark.width * SIZE_UNITS,\n      startPoint[1] + mark.height * SIZE_UNITS,\n    ]);\n\n    const vertices = [\n      ...quadraticCurve(0),\n      ...quadraticCurve(1 / NUMBER_OF_VERTICES_PER_ARC),\n    ];\n\n    for (let i = 2; i < NUMBER_OF_VERTICES_PER_ARC + 1; i++) {\n      const nextPoint = quadraticCurve(i / NUMBER_OF_VERTICES_PER_ARC);\n      vertices.push(\n        vertices[vertices.length - 2],\n        vertices[vertices.length - 1],\n        nextPoint[0],\n        nextPoint[1]\n      );\n    }\n\n    return vertices;\n  }\n\n  _getVerticesForAreaSection(mark) {\n    if (!this.lastMark) {\n      return [];\n    }\n\n    return this._mapToGPUSpace([\n      mark.x,\n      mark.y,\n      this.lastMark.x,\n      this.lastMark.y,\n      mark.x,\n      0, // TODO: Replace 0 to let area charts center around some other number\n      this.lastMark.x,\n      this.lastMark.y,\n      this.lastMark.x,\n      0,\n      mark.x,\n      0,\n    ]);\n  }\n\n  _getVerticesForPolygon(mark, sides) {\n    const center = this._mapToGPUSpace([mark.x, mark.y]);\n    const vertices = [];\n\n    for (let theta = 0; theta < 2 * Math.PI; theta += (2 * Math.PI) / sides) {\n      vertices.push(\n        center[0],\n        center[1],\n        center[0] + (mark.size / 2) * Math.cos(theta) * SIZE_UNITS,\n        center[1] + (mark.size / 2) * Math.sin(theta) * SIZE_UNITS,\n        center[0] +\n          (mark.size / 2) *\n            Math.cos(theta + (2 * Math.PI) / sides) *\n            SIZE_UNITS,\n        center[1] +\n          (mark.size / 2) * Math.sin(theta + (2 * Math.PI) / sides) * SIZE_UNITS\n      );\n    }\n    return vertices;\n  }\n\n  _getVerticesForTriangle(mark) {\n    //     1\n    //    / \\\n    //   2---3\n    const center = this._mapToGPUSpace([mark.x, mark.y]);\n\n    return [\n      center[0],\n      center[1] + (mark.size / 2) * SIZE_UNITS,\n      center[0] - (mark.size / 2) * SIZE_UNITS,\n      center[1] - (mark.size / 2) * SIZE_UNITS,\n      center[0] + (mark.size / 2) * SIZE_UNITS,\n      center[1] - (mark.size / 2) * SIZE_UNITS,\n    ];\n  }\n\n  _getVertexForDot = (mark) => this._mapToGPUSpace([mark.x, mark.y]);\n\n  _getVerticesForSquare(mark) {\n    const center = this._mapToGPUSpace([mark.x, mark.y]);\n    return [\n      center[0] + (mark.size / 2) * SIZE_UNITS, //  2------1,4\n      center[1] + (mark.size / 2) * SIZE_UNITS, //  |    /  |\n      center[0] - (mark.size / 2) * SIZE_UNITS, //  |  /    |\n      center[1] + (mark.size / 2) * SIZE_UNITS, // 3,5------6\n      center[0] - (mark.size / 2) * SIZE_UNITS,\n      center[1] - (mark.size / 2) * SIZE_UNITS,\n      center[0] + (mark.size / 2) * SIZE_UNITS,\n      center[1] + (mark.size / 2) * SIZE_UNITS,\n      center[0] - (mark.size / 2) * SIZE_UNITS,\n      center[1] - (mark.size / 2) * SIZE_UNITS,\n      center[0] + (mark.size / 2) * SIZE_UNITS,\n      center[1] - (mark.size / 2) * SIZE_UNITS,\n    ];\n  }\n\n  _getVerticesForRect(mark) {\n    //  1-----------3,6\n    //  |       /    |\n    //  |     /      |\n    // 2,5-----------4\n    const center = this._mapToGPUSpace([mark.x, mark.y]);\n    return [\n      center[0],\n      center[1] + mark.height * SIZE_UNITS,\n      center[0],\n      center[1],\n      center[0] + mark.width * SIZE_UNITS,\n      center[1] + mark.height * SIZE_UNITS,\n      center[0] + mark.width * SIZE_UNITS,\n      center[1],\n      center[0],\n      center[1],\n      center[0] + mark.width * SIZE_UNITS,\n      center[1] + mark.height * SIZE_UNITS,\n    ];\n  }\n\n  _getVerticesForTick(mark) {\n    const center = this._mapToGPUSpace([mark.x, mark.y]);\n    // 1----2\n    if (this.track.width) {\n      return [\n        center[0],\n        center[1],\n        center[0] + mark.width * SIZE_UNITS,\n        center[1],\n      ];\n    }\n\n    // 1\n    // |\n    // 2\n    if (mark.height) {\n      // default to mark value which has default if height never specified in track\n      return [\n        center[0],\n        center[1],\n        center[0],\n        center[1] + mark.height * SIZE_UNITS,\n      ];\n    }\n  }\n}\n\nexport default VertexCalculator;\n\nexport {\n  SIZE_UNITS,\n  transformGenomicRangeArcToStandard,\n  transformGenomicRangeToStandard,\n};\n"],"names":[],"version":3,"file":"offscreen-webgl-worker.e8c441ad.js.map"}